import angr
import networkx as nx
import matplotlib.pyplot as plt
# from networkx.drawing.nx_pydot import graphviz_layout
# import pygraphviz

def generate_cfg(binary_path):
    # Create an Angr project
    project = angr.Project(binary_path, load_options={"auto_load_libs":False})

    # Perform CFG analysis
    cfg = project.analyses.CFGFast()

    # Get the CFG graph
    graph = cfg.graph

    return graph

def make_cfg_string(file_path):
    # Replace 'your_binary_path' with the path to the binary you want to analyze
    binary_path = file_path

    # Generate the control flow graph
    cfg = generate_cfg(binary_path)
    if __name__ == "__main__":
        print(cfg)

    cfg_string = ""
    # Print basic block information
    for node in cfg.nodes():
        # print(f"Basic Block {node.addr:x}:")
        cfg_string += f"Basic Block {node.addr:x}:" + "\n"
        for successor in cfg.successors(node):
            # print(f"-> {successor.addr:x}")
            cfg_string += f"-> {successor.addr:x}" + "\n"

    return cfg_string

def draw_cfg(cfg_info, target_address="render/output.png"):
    # Create a directed graph using networkx
    graph = nx.DiGraph()

    # Parse the CFG information and add nodes and edges to the graph
    current_block = None
    for line in cfg_info.split('\n'):
        if line.startswith("Basic Block"):
            parts = line.split()
            # print(parts)
            current_block = int(parts[2][2:-1], 16)  # Convert hexadecimal address to integer
            # print(current_block)
            graph.add_node(current_block)

        elif line.startswith("-> "):
            successor_block = int(line.split()[1][2:], 16)
            # print(successor_block)
            graph.add_edge(current_block, successor_block)

    # Draw the graph
    # pos = nx.spring_layout(graph)
    # pos = nx.draw_planar(graph)
    # pos = graphviz_layout(graph, prog='dot')
            
    pos = {node: (0, -index) for index, node in enumerate(graph.nodes())}

    nx.draw(graph, pos, with_labels=True, node_size=500, node_color="skyblue", font_size=8, font_color="black", font_weight="bold", arrowsize=10)

    # Show the graph
    plt.savefig(target_address, format="png")
    if __name__ == "__main__":
        plt.show()

def save_cfg(load_file_address, save_file_address="render/output.png"):
    draw_cfg(make_cfg_string(load_file_address), save_file_address)

if __name__ == "__main__":
    # draw_cfg(make_cfg_string("F:/Coding/hello.exe"), "output.png")
    draw_cfg(make_cfg_string("F:/Coding/hello.exe"), "output.png")