import angr
import networkx as nx
import matplotlib.pyplot as plt

def generate_cfg(binary_path):
    project = angr.Project(binary_path, load_options={"auto_load_libs":False})

    cfg = project.analyses.CFGFast()

    graph = cfg.graph

    return graph

def make_cfg_string(file_path):

    binary_path = file_path

    cfg = generate_cfg(binary_path)
    if __name__ == "__main__":
        print(cfg)

    cfg_string = ""
    for node in cfg.nodes():
        cfg_string += f"Basic Block {node.addr:x}:" + "\n"
        for successor in cfg.successors(node):
            cfg_string += f"->{successor.addr:x}" + "\n"

    return cfg_string

def draw_cfg(cfg_info, target_address="render/output.png"):
    graph = nx.DiGraph()

    current_block = None
    for line in cfg_info.split('\n'):
        if line.startswith("Basic Block"):
            parts = line.split()
            current_block = int(parts[2][2:-1], 16)  #Converting hexadecimal address to integer
            graph.add_node(current_block)

        elif line.startswith("->"):
            successor_block = int(line.split()[1][2:], 16)
            graph.add_edge(current_block, successor_block)
            
    pos = {node: (0, -index) for index, node in enumerate(graph.nodes())}

    nx.draw(graph, pos, with_labels=True, node_size=500, node_color="skyblue", font_size=8, font_color="black", font_weight="bold", arrowsize=10)

    plt.savefig(target_address, format="png")
    if __name__ == "__main__":
        plt.show()

def save_cfg(load_file_address, save_file_address="render/output.png"):
    draw_cfg(make_cfg_string(load_file_address), save_file_address)

if __name__ == "__main__":
    # draw_cfg(make_cfg_string(""), "output.png")
    # draw_cfg(make_cfg_string(""), "output3.png")
    draw_cfg(make_cfg_string(""), "output0.png") # Fill in file address to load from