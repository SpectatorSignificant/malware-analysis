import networkx as nx
import matplotlib.pyplot as plt

def draw_cfg(cfg_info, target_address="render\\output.png"):
    # Create a directed graph using networkx
    graph = nx.Graph()

    # Parse the CFG information and add nodes and edges to the graph
    current_block = None
    for line in cfg_info.split('\n'):
        if line.startswith("Basic Block"):
            parts = line.split()
            # print(parts)
            current_block = int(parts[2][2:-1], 16)  # Convert hexadecimal address to integer
            # print(current_block)
            graph.add_node(current_block)

        elif line.startswith("-> "):
            successor_block = int(line.split()[1][2:], 16)
            # print(successor_block)
            graph.add_edge(current_block, successor_block)

    # Draw the graph
    # pos = nx.spring_layout(graph)
    
    pos = {node: (0, -index) for index, node in enumerate(graph.nodes())}
    nx.draw(graph, pos, with_labels=True, node_size=500, node_color="skyblue", font_size=8, font_color="black", font_weight="bold", arrowsize=10)

    # Show the graph
    # plt.savefig(target_address, format="png")
    if __name__ == "__main__":
        plt.show()

if __name__ == "__main__":
    # Replace 'your_cfg_info' with the actual CFG information
    # cfg_info = """Basic Block 1400021ea:\nBasic Block 140201040:\nBasic Block 140002150:"""
    cfg_info = """Basic Block 1400021ea:\n-> 1400020fd\nBasic Block 140201040:\nBasic Block 140002150:\n-> 140201040\n-> 14000215c"""

    # Draw the control flow graph
    draw_cfg(cfg_info)