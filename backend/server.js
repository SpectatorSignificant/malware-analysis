const {createFile, createGraph, searchGraph} = require("./mongoose.js");
const express = require('express');
const axios = require("axios");
const bodyParser = require('body-parser');
const multer = require('multer');
const fs = require("fs");
const crypto = require("crypto");
const path = require("path");
const dotenv = require('dotenv');
dotenv.config()
const cors = require('cors');
const app = express();
app.use(cors());
app.use(bodyParser.json());
const API_KEY = process.env.API_KEY;
const PORT= 3001; 

const dir = __dirname + "\\uploads\\";

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, dir); 
    },
    filename: function (req, file, cb) {
        cb(null, file.originalname);
    },
});  

const upload = multer({ storage: storage });

app.post('/upload-file', upload.single('file'), (req, response) => {
    const filePath = req.file.path;
    const fileName = req.file.filename;
    const fileSize = req.file.size;
    const fileType = req.body.fileType;
    let location = path.join(__dirname, "..") + "\\public\\render\\" + path.parse(fileName).name + ".png"
    const relativeLocation = "render\\" + path.parse(fileName).name + ".png"


    let hashSHA256, hashStatus;

    function calculateFileHash(filePath) {
        return new Promise((resolve, reject) => {
            const hash = crypto.createHash('sha256');
            const fileStream = fs.createReadStream(filePath);
            
            fileStream.on('data', (chunk) => {
                hash.update(chunk);
            });
      
            fileStream.on('end', () => {
                const hashValue = hash.digest('hex');
                resolve(hashValue);
            });
      
            fileStream.on('error', (error) => {
                reject(error);
            });
        });
    }
    
    function checkForHash(hash) {
        return new Promise((resolve, reject) => {
            const options = {
                method: 'GET',
                url: `https://www.virustotal.com/api/v3/files/${hash}`,
                headers: {
                    accept: 'application/json',
                    "x-apikey": API_KEY
                }
            };
            
            axios
                .request(options)
                .then((res) => {
                    resolve(res.status)
                })
                .catch((error) => {
                    resolve(error.response.status)
                })
        })
    }

    function handleResponse() {
        return new Promise((resolve, reject) => {
            searchGraph({ location: relativeLocation })
                .then((res) => {
                    console.log(res)
                    if (res.length == 0) {

                        const jsonData = {
                            file_address: "F:/Coding/hello.exe",
                            save_address: location
                        }

                        const config = {
                            headers: {
                                'content-type': 'application/json',
                            },
                        };

                        const url = "http://127.0.0.1:8000/cfg";

                        axios.post(url, jsonData, config)
                            .then((r) => {
                                console.log(r.data.source + " saved at " + r.data.destination);

                                createGraph({
                                    name: fileName,
                                    location: relativeLocation
                                }).then((resp) => {
                                    resolve({ success: true, message: 'File uploaded successfully', hashSHA256: hashSHA256, hashStatus: hashStatus, graphLocation: relativeLocation, fileName, filePath })
                                }).catch((error) => {
                                    console.log("Error creating graph:", error.message)
                                    reject(error)
                                })
                            })
                            .catch((error) => {
                                console.log("Error posting to PORT 8000:", error.message);
                                reject(error)
                            });

                    }
                    else {
                        resolve({ success: true, message: 'File uploaded successfully', hashSHA256: hashSHA256, hashStatus: hashStatus, graphLocation: res[0].location, fileName, filePath })
                    }
                })
        })
    }

    calculateFileHash(filePath)
        .then((hashValue) => {
            hashSHA256 = hashValue;
            console.log({ hashSHA256 })
            checkForHash(hashSHA256)
                .then((res) => {
                    hashStatus = res
                    console.log({ hashStatus })

                    if (hashStatus == 404) {
                        const jsonData = {
                            name: fileName,
                            size: fileSize,
                            type: fileType,
                            hashSHA256: hashSHA256
                        }
    
                        const config = {
                            headers: {
                                'content-type': 'application/json',
                            },
                        };
    
                        const url = "http://localhost:3001/add-malware";
    
                        axios.post(url, jsonData, config)
                            .then((r) => {})
                            .catch(e => {
                                console.log("Error adding malware to db:", e.message)
                            })
                    }
                    
                    handleResponse()
                        .then(r => {
                            console.log("JSON Response:", r)
                            response.json(r)
                        })
                        .catch(e => {
                            console.log("Error handling response:", e.message)
                        })
                })
        })
        .catch((error) => {
            console.log("Error calculating has:", error.message)
        })
    
});

app.post("/add-malware", async (req, res) => {
    console.log("Malware addition request")
    console.log(req.body)
    createFile(req.body)
        .then(response => {
            res.json({ success: true, message: "Malware added successfully"  })
        })
        .catch((error) => {
            res.status(error.response.status).json({ success: false, message: "Error adding malware to db" })
        })
})

app.listen(PORT, () => {
    console.log(`Server started on PORT ${ PORT }`);
});